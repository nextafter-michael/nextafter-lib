!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.NextAfterPixel=t():e.NextAfterPixel=t()}(this,(()=>(()=>{"use strict";var e={d:(t,r)=>{for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{NextAfterPixelFetchDonations:()=>s,default:()=>a});class r{static getURL="https://pxl.nextafter.org/get_cors.php";static sendURL="https://pxl.nextafter.org/tracker.php";static validQueryParams=["id","type","range","from","to","bypass"];static validateQueryParamValues={amt:e=>e&&!isNaN(e)&&e>0,type:e=>[void 0,"single","recurring","unbounce"].includes(e),range:e=>[void 0,"hour","week","month","year","all"].includes(e),from:e=>e&&"string"==typeof e&&/^\d+$/.test(e)&&8===e.length&&!isNaN(Date.parse(e)),to:e=>e&&"string"==typeof e&&/^\d+$/.test(e)&&8===e.length&&!isNaN(Date.parse(e)),name:e=>e&&"string"==typeof e&&e.length>0,state:e=>e&&"string"==typeof e&&e.length>0,city:e=>e&&"string"==typeof e&&e.length>0};static sendPixel=function(e){const t=new Image;t.onload=function(){console.log("Pixel sent successfully."),this.remove()},t.onerror=function(){console.error("Error sending pixel."),this.remove()},t.src=e,document.body.appendChild(t)};constructor(e){const t=Symbol("id");this._getId=function(){return this[t]},this._setId=function(e){this[t]=e};const r=Symbol("debug_mode");this._getDebugMode=function(){return this[r]},this._setDebugMode=function(e){this[r]=e},this._setId(e),this._setDebugMode(!1),this.responses=[]}get(e={},t=void 0){const s=new URL(r.getURL);return s.searchParams.append("id",this.id),Object.entries(e).filter((([e,t])=>void 0!==t)).map((([e,t])=>[e.toLocaleLowerCase(),t])).sort((([e],[t])=>{const s=r.validQueryParams;return s.indexOf(e)-s.indexOf(t)})).forEach((([e,t])=>{if("id"==e)s.searchParams.append("id",this.id),console.warn("Warning: Cannot override ID set by constructor.");else if("bypass"==e)console.warn("Cannot use bypass parameter in get() method. Enable pixel instance debug mode instead to bypass cache.");else if("from"==e||"to"==e){const a=new Date(t).toISOString().split("T")[0].replace(/-/g,"");if(!r.validateQueryParamValues[e](a))return console.warn(`Warning: Invalid date format for "${e}" ignored. Expected format is YYYYMMDD.`);s.searchParams.append(e,a)}else if(r.validQueryParams.includes(e)){if(r.validateQueryParamValues[e]&&!r.validateQueryParamValues[e](t))return console.warn(`Warning: Invalid value for "${e}" ignored.`);s.searchParams.append(e,t)}else console.warn(`Warning: Invalid query parameter "${e}" ignored.`)})),this.debug&&(s.searchParams.append("bypass","1"),console.warn("Warning! Bypass mode is intended for testing purposes only. Disable it before launching your experiment.")),new Promise((async(e,r)=>{try{const a=await fetch(s.href,{method:"GET",headers:{accept:"application/json"}});if(200!=a.status)throw new Error("HTTP error:",a.status);const n=await a.json();t&&"function"==typeof t&&t(n),this.responses.push(n),e(n),setTimeout((()=>{r({error:"Timeout: No response from server after 10 seconds."})}),1e4)}catch(e){console.error("Failed to fetch donations from server:",e),r({error:err.message})}}))}get_all(e={},t=void 0){const s=new URL(r.getURL);return s.searchParams.append("id",this.id),Object.entries(e).filter((([e,t])=>void 0!==t)).map((([e,t])=>[e.toLocaleLowerCase(),t])).sort((([e],[t])=>{const s=[...r.validQueryParams,"limit","offset"];return s.indexOf(e)-s.indexOf(t)})).forEach((([e,t])=>{if("id"==e)s.searchParams.append("id",this.id),console.warn("Warning: Cannot override ID set by constructor.");else if("bypass"==e)console.warn("Cannot use bypass parameter in get() method. Enable pixel instance debug mode instead to bypass cache.");else if("from"==e||"to"==e){const a=new Date(t).toISOString().split("T")[0].replace(/-/g,"");if(!r.validateQueryParamValues[e](a))return console.warn(`Warning: Invalid date format for "${e}" ignored. Expected format is YYYYMMDD.`);s.searchParams.append(e,a)}else if([...r.validQueryParams,"limit","offset"].includes(e)){if(r.validateQueryParamValues[e]&&!r.validateQueryParamValues[e](t))return console.warn(`Warning: Invalid value for "${e}" ignored.`);s.searchParams.append(e,t)}else console.warn(`Warning: Invalid query parameter "${e}" ignored.`)})),this.debug&&(s.searchParams.append("bypass","1"),console.warn("Warning! Bypass mode is intended for testing purposes only. Disable it before launching your experiment.")),new Promise((async(e,r)=>{try{const a=await fetch(s.href,{method:"GET",headers:{accept:"application/json"}});if(200!=a.status)throw new Error("HTTP error:",a.status);const n=await a.json();t&&"function"==typeof t&&t(n),this.responses.push(n),e(n),setTimeout((()=>{r({error:"Timeout: No response from server after 10 seconds."})}),1e4)}catch(e){console.error("Failed to fetch donations from server:",e),r({error:err.message})}}))}track(e,t){const s=new URL(r.sendURL);if(s.searchParams.append("id",this.id),s.searchParams.append("amount",e),"single"!==t&&"recurring"!==t)return console.warn(`Warning: Invalid type "${t}" ignored. Valid types are "single" or "recurring".`);s.searchParams.append("type",t),this.sendPixel(sendURL.href)}get id(){return this._getId()}set debug(e){this._setDebugMode(!!e),console.info("Debug mode now "+(this._getDebugMode()?"enabled":"disabled"))}get debug(){return this._getDebugMode()}}async function s(e,t={},s=void 0){const a=new r(e);return await a.get(t,s)}const a=r;return t})()));