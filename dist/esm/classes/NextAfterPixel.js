var e={d:(r,t)=>{for(var a in t)e.o(t,a)&&!e.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:t[a]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r)},r={};e.d(r,{A:()=>s,P:()=>a});class t{static getURL="https://pxl.nextafter.org/get_cors.php";static sendURL="https://pxl.nextafter.org/tracker.php";static validQueryParams=["id","type","range","from","to","bypass"];static validateQueryParamValues={amt:e=>e&&!isNaN(e)&&e>0,type:e=>[void 0,"single","recurring","unbounce"].includes(e),range:e=>[void 0,"hour","week","month","year","all"].includes(e),from:e=>e&&"string"==typeof e&&/^\d+$/.test(e)&&8===e.length&&!isNaN(Date.parse(e)),to:e=>e&&"string"==typeof e&&/^\d+$/.test(e)&&8===e.length&&!isNaN(Date.parse(e)),name:e=>e&&"string"==typeof e&&e.length>0,state:e=>e&&"string"==typeof e&&e.length>0,city:e=>e&&"string"==typeof e&&e.length>0};static sendPixel=function(e){const r=new Image;r.onload=function(){console.log("Pixel sent successfully."),this.remove()},r.onerror=function(){console.error("Error sending pixel."),this.remove()},r.src=e,document.body.appendChild(r)};constructor(e){const r=Symbol("id");this._getId=function(){return this[r]},this._setId=function(e){this[r]=e};const t=Symbol("debug_mode");this._getDebugMode=function(){return this[t]},this._setDebugMode=function(e){this[t]=e},this._setId(e),this._setDebugMode(!1),this.responses=[]}get(e={},r=void 0){const a=new URL(t.getURL);return a.searchParams.append("id",this.id),Object.entries(e).filter((([e,r])=>void 0!==r)).map((([e,r])=>[e.toLocaleLowerCase(),r])).sort((([e],[r])=>{const a=t.validQueryParams;return a.indexOf(e)-a.indexOf(r)})).forEach((([e,r])=>{if("id"==e)a.searchParams.append("id",this.id),console.warn("Warning: Cannot override ID set by constructor.");else if("bypass"==e)console.warn("Cannot use bypass parameter in get() method. Enable pixel instance debug mode instead to bypass cache.");else if("from"==e||"to"==e){const s=new Date(r).toISOString().split("T")[0].replace(/-/g,"");if(!t.validateQueryParamValues[e](s))return console.warn(`Warning: Invalid date format for "${e}" ignored. Expected format is YYYYMMDD.`);a.searchParams.append(e,s)}else if(t.validQueryParams.includes(e)){if(t.validateQueryParamValues[e]&&!t.validateQueryParamValues[e](r))return console.warn(`Warning: Invalid value for "${e}" ignored.`);a.searchParams.append(e,r)}else console.warn(`Warning: Invalid query parameter "${e}" ignored.`)})),this.debug&&(a.searchParams.append("bypass","1"),console.warn("Warning! Bypass mode is intended for testing purposes only. Disable it before launching your experiment.")),new Promise((async(e,t)=>{try{const s=await fetch(a.href,{method:"GET",headers:{accept:"application/json"}});if(200!=s.status)throw new Error("HTTP error:",s.status);const n=await s.json();r&&"function"==typeof r&&r(n),this.responses.push(n),e(n),setTimeout((()=>{t({error:"Timeout: No response from server after 10 seconds."})}),1e4)}catch(e){console.error("Failed to fetch donations from server:",e),t({error:err.message})}}))}get_all(e={},r=void 0){const a=new URL(t.getURL);return a.searchParams.append("id",this.id),Object.entries(e).filter((([e,r])=>void 0!==r)).map((([e,r])=>[e.toLocaleLowerCase(),r])).sort((([e],[r])=>{const a=[...t.validQueryParams,"limit","offset"];return a.indexOf(e)-a.indexOf(r)})).forEach((([e,r])=>{if("id"==e)a.searchParams.append("id",this.id),console.warn("Warning: Cannot override ID set by constructor.");else if("bypass"==e)console.warn("Cannot use bypass parameter in get() method. Enable pixel instance debug mode instead to bypass cache.");else if("from"==e||"to"==e){const s=new Date(r).toISOString().split("T")[0].replace(/-/g,"");if(!t.validateQueryParamValues[e](s))return console.warn(`Warning: Invalid date format for "${e}" ignored. Expected format is YYYYMMDD.`);a.searchParams.append(e,s)}else if([...t.validQueryParams,"limit","offset"].includes(e)){if(t.validateQueryParamValues[e]&&!t.validateQueryParamValues[e](r))return console.warn(`Warning: Invalid value for "${e}" ignored.`);a.searchParams.append(e,r)}else console.warn(`Warning: Invalid query parameter "${e}" ignored.`)})),this.debug&&(a.searchParams.append("bypass","1"),console.warn("Warning! Bypass mode is intended for testing purposes only. Disable it before launching your experiment.")),new Promise((async(e,t)=>{try{const s=await fetch(a.href,{method:"GET",headers:{accept:"application/json"}});if(200!=s.status)throw new Error("HTTP error:",s.status);const n=await s.json();r&&"function"==typeof r&&r(n),this.responses.push(n),e(n),setTimeout((()=>{t({error:"Timeout: No response from server after 10 seconds."})}),1e4)}catch(e){console.error("Failed to fetch donations from server:",e),t({error:err.message})}}))}track(e,r){const a=new URL(t.sendURL);if(a.searchParams.append("id",this.id),a.searchParams.append("amount",e),"single"!==r&&"recurring"!==r)return console.warn(`Warning: Invalid type "${r}" ignored. Valid types are "single" or "recurring".`);a.searchParams.append("type",r),this.sendPixel(sendURL.href)}get id(){return this._getId()}set debug(e){this._setDebugMode(!!e),console.info("Debug mode now "+(this._getDebugMode()?"enabled":"disabled"))}get debug(){return this._getDebugMode()}}async function a(e,r={},a=void 0){const s=new t(e);return await s.get(r,a)}const s=t;var n=r.P,o=r.A;export{n as NextAfterPixelFetchDonations,o as default};