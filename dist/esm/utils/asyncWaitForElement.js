var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function n(e,t=1e4){return new Promise(((n,o)=>{if(document.querySelector(e)&&document.querySelector(e).isConnected)return n(document.querySelector(e));let r;const c=new MutationObserver((t=>{for(const o of t)for(const t of o.addedNodes)if(t instanceof HTMLElement&&t.matches(e)&&t.isConnected)return clearInterval(r),c.disconnect(),n(t)}));c.observe(document.documentElement,{childList:!0,subtree:!0}),r=setInterval((e=>{if(document.querySelector(e)&&document.querySelector(e).isConnected)return clearInterval(r),c.disconnect(),n(document.querySelector(e))}),50,e),setTimeout((t=>{t.disconnect(),o(new Error(`Element with selector "${e}" not found within the time limit.`))}),t,c)}))}function o(...e){return Promise.all(e.map((e=>waitForElement(e))))}e.d(t,{Ay:()=>r,Xs:()=>n,s$:()=>o});const r=n;var c=t.Xs,s=t.s$,i=t.Ay;export{c as asyncWaitForElement,s as asyncWaitForElements,i as default};