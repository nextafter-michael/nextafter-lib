!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.experimentUtils=t():e.experimentUtils=t()}(this,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>r,variablesToConfigObject:()=>o});const n=(e,t,n)=>{if(!t)return console.warn("setNestedProperty called with an undefined or null path:",t),e;const o=t.split(".");let r=e;for(let e=0;e<o.length-1;e++){const t=o[e];r[t]||(r[t]=isNaN(o[e+1])?{}:[]),r=r[t]}const a=o[o.length-1];if(a.includes("[")&&a.includes("]")){const[e,o]=a.split(/\[(.+?)\]/).filter(Boolean);r[e]||(r[e]=[]);const s=parseInt(o,10);isNaN(s)?console.warn(`Invalid index in path: ${t}`):r[e][s]=n}else r[a]=n;return e};function o(e,t){const o={...t},r=(e,t="")=>{const a=t?`${t}.${e.mapsTo||""}`:e.mapsTo;if((e=>"group"===e.type)(e))e.items&&e.items.length>0?(Array.isArray(e.items)||console.warn(`Variable ${e.name} is a group but items is not an array.`),e.items.forEach((e=>{r(e,a)}))):console.warn(`Variable ${e.name} is a group but has no items.`);else if((s=a)&&s.includes("[")&&s.includes("]")){const[t,n]=a.split(/\[(.+?)\]/).filter(Boolean);o[t]||(o[t]=[]);const r=parseInt(n,10);if(isNaN(r))console.warn(`Variable ${e.name} has an invalid index in mapsTo property.`);else{o[t][r]||(o[t][r]={});const n=a.split(".").pop(),s="number"===e.type?Number(e.value):String(e.value);o[t][r][n]=s}}else if((e=>e&&e.includes("."))(a)){const t="number"===e.type?Number(e.value):String(e.value);n(o,a,t)}else if(a){const t="number"===e.type?Number(e.value):String(e.value);o[a]=t}else console.warn(`Variable ${e.name} does not have a valid mapsTo property.`);var s};return e.forEach((e=>r(e))),o}const r={variablesToConfigObject:o};return t})()));